#!/usr/local/bin/python3

'''IGP Render Controller Version 5

This file simplifies starting the controller by allowing the user to choose
which mode (server, GUI client, etc) to run by appending the appropriate
arguments.'''

'''
#####################################################################
Copyright 2014 James Adson

This file is part of IGP Render Controller.  
IGP Render Controller is free software: you can redistribute it 
and/or modify it under the terms of the GNU General Public License 
as published by the Free Software Foundation, either version 3 of 
the License, or any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
#####################################################################
'''

import argparse
import cli
import server
#import gui


class Parser(argparse.ArgumentParser):
    def __init__(self):
        argparse.ArgumentParser.__init__(self)

        self.add_argument('-s', '--server', action='store_true',
            help='Start the render server.')
        self.add_argument('-g', '--gui', action='store_true', dest='gui',
            default=False, help='Start client graphical user interface')
        self.add_argument('-l', '--list', action='store_true', default=False, 
            dest='joblist', help='List all items in render queue.')
        self.add_argument('-a', '--listall', action='store_true', 
            default=False, dest='listall', 
            help='Print full status info for all jobs in queue.')
        self.add_argument('-i', '--info', action='store', default=-1,
            dest='info', help='Print full status info for job with given ID.',
            metavar='ID', type=int)
        self.add_argument('--start', action='store', default=-1,
            dest='start', help='Start render for job witn given ID.', 
            metavar='ID', type=int)
        self.add_argument('--stop', action='store', default=-1, dest='stop',
            help='Stop render for job with given ID.', metavar='ID', type=int)
        self.add_argument('--resume', action='store', default=-1, 
            dest='resume', type=int, metavar='ID', 
            help='Resume a stopped job with a given ID.')
        self.add_argument('--killall', dest='killall', default='',
            type=str, help='Kill all terragen or blender processes on all '
            'computers. Specify "blender" or "terragen".', metavar='PROG')
        self.add_argument('-t', '--toggle', nargs=2, dest='toggle', 
            metavar=('ID', 'COMP'), help='Toggle computer render status.')
        self.add_argument('--checkframes', action='store_true', default=False,
            dest='checkframes', help='Check a directory for missing frames.')
        self.add_argument('-e', '--enqueue', action='store_true', default=False,
            dest='enqueue', help='Create a new job (interactive)')
        self.add_argument('-p', '--port', action='store', dest='port', 
            default=2020, type=int, help='Port number.')
        self.add_argument('-c', '--connect_to', action='store', dest='host',
            type=str, default='localhost', help='Hostname or IP for command-'
            'line interface to connect to. If none is specified, the '
            'default "localhost" will be used. This option is ignored if '
            '-s or -g options are used.')
        self.add_argument('--autostart', action='store', dest='autostart',
            default=None, nargs='?', const='get',
            help='Without any additional options, prints the '
            'current autostart status. If "on" or "off" is specified, sets '
            'the autostart mode to the specified state.')

    def parse(self):
        args = self.parse_args()
        if args.server:
            rserver = server.RenderServer(port=args.port)
            return
        elif args.gui:
            import gui
            masterwin = gui.MasterWin()
            masterwin.mainloop()
            return

        #all other options require a server running on the local machine
        interface = cli.Cli(args.host, args.port)
        if args.joblist:
            interface.list_jobs()
        if args.info>= 0:
            interface.print_single_job(args.info)
        if args.listall:
            interface.list_all()
        if args.start >= 0:
            interface.start_render(args.start)
        if args.stop >= 0:
            interface.kill_render(args.stop)
        if args.resume >= 0:
            interface.resume_render(args.resume)
        if args.killall:
            interface.killall(args.killall)
        if args.toggle:
            job_id, comp = args.toggle
            interface.toggle_comp(job_id, comp)
        if args.checkframes:
            interface.checkframes()
        if args.enqueue:
            interface.enqueue()
        if args.autostart:
            interface.toggle_autostart(args.autostart)


if __name__ == '__main__':
    parser = Parser()
    parser.parse()
